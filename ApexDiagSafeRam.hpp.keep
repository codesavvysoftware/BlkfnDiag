////////////////////////////////////////////////////////////////////////////////
/// @file ApexDiagSafeRam.hpp
///
/// @details Apex safe ram diagnostic class definition.
///
/// @if REVISION_HISTORY_INCLUDED
/// @par Edit History
/// -   spolke     28-NOV-2013  Created. 
/// @endif
///
/// @par Copyright (c) 2013 Rockwell Automation Technologies, Inc. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
#ifndef APEXDIAGSAFERAM_HPP
#define APEXDIAGSAFERAM_HPP 

// SYSTEM INCLUDES
// <none>

// C PROJECT INCLUDES
// <none>

// C++ PROJECT INCLUDES
//#include "ApexStd.hpp"                  // for UINT32
//#include "ApexParameters.hpp"           // for DiagControlBlock
//#include "ApexDiagnostic.hpp"
#include "Defs.h"
#include "BlackfinDiagnostic.h"
#include "BlackfinDiag.h"





extern "C" DGN_SAFE_RAM DgnSafeRam;

////////////////////////////////////////////////////////////////////////////////
/// @class ApexDiagSafeRam
///
/// @ingroup 
///
/// @brief Apex safe ram diagnostic class.
////////////////////////////////////////////////////////////////////////////////
class ApexDiagSafeRam
{
public:
    // PUBLIC METHODS
    
    /// Initializes safe ram diagnostic.
    static void Init(void);

    /// Verifies safe ram data validity.
    static ApexDiagnostic::TestState Check(ApexDiagnostic::DiagControlBlock * );

protected:
    // PROTECTED METHODS

private:
    // PRIVATE METHODS

    /// Default constructor.
    ApexDiagSafeRam();
    
    /// Default destructor.
    ~ApexDiagSafeRam();

    /// Copy constructor and assignment operator not implemented.
    ApexDiagSafeRam(const ApexDiagSafeRam &);
    ApexDiagSafeRam &operator=(const ApexDiagSafeRam &);

    /// Verifies address test-related variable doesn't match its complement.
    static bool IsAddrSafeRamInvalid();
    
    /// Verifies data test-related variable doesn't match its complement.
    static bool IsDataSafeRamInvalid();

    // MEMBER VARIABLES
};

#endif // #if !defined(APEXDIAGSAFERAM_HPP) 
